============================= test session starts ==============================
platform linux -- Python 3.10.18, pytest-8.4.1, pluggy-1.6.0
rootdir: /app
plugins: anyio-4.9.0, asyncio-1.1.0
asyncio: mode=strict, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collected 23 items

src/api/tests/test_admin_scheduler.py .F..                               [ 17%]
src/api/tests/test_api_admin.py ..                                       [ 26%]
src/api/tests/test_api_alerts.py ...                                     [ 39%]
src/api/tests/test_api_basic.py .                                        [ 43%]
src/api/tests/test_api_predict.py ...                                    [ 56%]
src/api/tests/test_api_prediction_history.py .                           [ 60%]
src/api/tests/test_api_simulated_trade.py F.                             [ 69%]
src/api/tests/test_api_user.py ...                                       [ 82%]
src/api/tests/test_api_watchlist.py ...                                  [ 95%]
src/api/tests/test_e2e_scenario.py F                                     [100%]

=================================== FAILURES ===================================
___________________ TestAdminScheduler.test_schedule_status ____________________

self = <test_admin_scheduler.TestAdminScheduler object at 0x7f07a50387c0>

>   ???
E   assert 500 == 200
E    +  where 500 = <Response [500 Internal Server Error]>.status_code

/home/user01/vibe-coding/StocksCursor/src/api/tests/test_admin_scheduler.py:23: AssertionError
_____________________________ test_simulate_trade ______________________________

>   ???
E   assert 500 == 200
E    +  where 500 = <Response [500 Internal Server Error]>.status_code

/home/user01/vibe-coding/StocksCursor/src/api/tests/test_api_simulated_trade.py:16: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-20 20:34:03,428 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-07-20 20:34:03,429 INFO sqlalchemy.engine.Engine SELECT daily_prices.id AS daily_prices_id, daily_prices.symbol AS daily_prices_symbol, daily_prices.date AS daily_prices_date, daily_prices.open AS daily_prices_open, daily_prices.high AS daily_prices_high, daily_prices.low AS daily_prices_low, daily_prices.close AS daily_prices_close, daily_prices.volume AS daily_prices_volume, daily_prices.created_at AS daily_prices_created_at, daily_prices.updated_at AS daily_prices_updated_at 
FROM daily_prices 
WHERE daily_prices.symbol = %(symbol_1)s ORDER BY daily_prices.date DESC 
 LIMIT %(param_1)s
2025-07-20 20:34:03,430 INFO sqlalchemy.engine.Engine [generated in 0.00034s] {'symbol_1': '005930', 'param_1': 1}
2025-07-20 20:34:03,432 INFO sqlalchemy.engine.Engine ROLLBACK
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:1096 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1895 SELECT daily_prices.id AS daily_prices_id, daily_prices.symbol AS daily_prices_symbol, daily_prices.date AS daily_prices_date, daily_prices.open AS daily_prices_open, daily_prices.high AS daily_prices_high, daily_prices.low AS daily_prices_low, daily_prices.close AS daily_prices_close, daily_prices.volume AS daily_prices_volume, daily_prices.created_at AS daily_prices_created_at, daily_prices.updated_at AS daily_prices_updated_at 
FROM daily_prices 
WHERE daily_prices.symbol = %(symbol_1)s ORDER BY daily_prices.date DESC 
 LIMIT %(param_1)s
INFO     sqlalchemy.engine.Engine:base.py:1900 [generated in 0.00034s] {'symbol_1': '005930', 'param_1': 1}
INFO     sqlalchemy.engine.Engine:base.py:1122 ROLLBACK
ERROR    src.api.routers.simulated_trade:simulated_trade.py:54 모의매매 기록 실패: 'DailyPrice' object has no attribute 'close_price'
Traceback (most recent call last):
  File "/app/src/api/routers/simulated_trade.py", line 22, in simulate_trade
    current_price = stock_service.get_current_price(trade.symbol, db)
  File "/app/src/api/services/stock_service.py", line 39, in get_current_price
    return latest_price.close_price
AttributeError: 'DailyPrice' object has no attribute 'close_price'
______________________________ test_e2e_scenario _______________________________

    def test_e2e_scenario():
        # 1. 회원가입
        unique = str(uuid4())[:8]
        user_payload = {"username": f"e2euser_{unique}", "email": f"e2euser_{unique}@example.com", "password": "e2epass"}
        r = client.post("/users/register", json=user_payload)
        assert r.status_code == 200 or r.status_code == 201
        user_id = r.json().get("id")
        assert user_id
    
        # 2. 관심종목 추가
        watch_payload = {"user_id": user_id, "symbol": "005930"}
        r = client.post("/watchlist/add", json=watch_payload)
        assert r.status_code == 200
    
        # 3. 관심종목 조회
        r = client.get(f"/watchlist/get/{user_id}")
        assert r.status_code == 200
        assert "005930" in r.json().get("watchlist", [])
    
        # 4. 예측 요청
        r = client.post("/predict", json={"symbol": "005930"})
        assert r.status_code == 200
        assert "prediction" in r.json()
    
        # 5. 모의매매 기록
        trade_payload = {"user_id": user_id, "symbol": "005930", "trade_type": "buy", "price": 10000, "quantity": 1}
        r = client.post("/trade/simulate", json=trade_payload)
>       assert r.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

src/api/tests/test_e2e_scenario.py:35: AssertionError
----------------------------- Captured stdout call -----------------------------
2025-07-20 20:34:04,500 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-07-20 20:34:04,501 INFO sqlalchemy.engine.Engine SELECT app_users.id AS app_users_id, app_users.username AS app_users_username, app_users.password_hash AS app_users_password_hash, app_users.email AS app_users_email, app_users.role AS app_users_role, app_users.is_active AS app_users_is_active, app_users.telegram_id AS app_users_telegram_id, app_users.created_at AS app_users_created_at, app_users.updated_at AS app_users_updated_at 
FROM app_users 
WHERE app_users.username = %(username_1)s OR app_users.email = %(email_1)s 
 LIMIT %(param_1)s
2025-07-20 20:34:04,501 INFO sqlalchemy.engine.Engine [cached since 2.696s ago] {'username_1': 'e2euser_edf5310c', 'email_1': 'e2euser_edf5310c@example.com', 'param_1': 1}
2025-07-20 20:34:04,722 INFO sqlalchemy.engine.Engine INSERT INTO app_users (username, password_hash, email, role, is_active, telegram_id, created_at, updated_at) VALUES (%(username)s, %(password_hash)s, %(email)s, %(role)s, %(is_active)s, %(telegram_id)s, now(), now()) RETURNING app_users.id, app_users.created_at, app_users.updated_at
2025-07-20 20:34:04,722 INFO sqlalchemy.engine.Engine [cached since 2.671s ago] {'username': 'e2euser_edf5310c', 'password_hash': '$2b$12$beX112ZeOW277nJHQwQ14.Hr4WXfkIQ0yCPHMaKBF3oKcCm79oluC', 'email': 'e2euser_edf5310c@example.com', 'role': 'user', 'is_active': True, 'telegram_id': None}
2025-07-20 20:34:04,724 INFO sqlalchemy.engine.Engine COMMIT
2025-07-20 20:34:04,728 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-07-20 20:34:04,729 INFO sqlalchemy.engine.Engine SELECT app_users.id, app_users.username, app_users.password_hash, app_users.email, app_users.role, app_users.is_active, app_users.telegram_id, app_users.created_at, app_users.updated_at 
FROM app_users 
WHERE app_users.id = %(pk_1)s
2025-07-20 20:34:04,729 INFO sqlalchemy.engine.Engine [cached since 2.669s ago] {'pk_1': 15}
2025-07-20 20:34:04,732 INFO sqlalchemy.engine.Engine ROLLBACK
2025-07-20 20:34:04,737 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-07-20 20:34:04,737 INFO sqlalchemy.engine.Engine SELECT watch_list.user_id AS watch_list_user_id, watch_list.symbol AS watch_list_symbol, watch_list.created_at AS watch_list_created_at, watch_list.updated_at AS watch_list_updated_at 
FROM watch_list 
WHERE watch_list.user_id = %(user_id_1)s AND watch_list.symbol = %(symbol_1)s 
 LIMIT %(param_1)s
2025-07-20 20:34:04,737 INFO sqlalchemy.engine.Engine [cached since 0.2822s ago] {'user_id_1': 15, 'symbol_1': '005930', 'param_1': 1}
2025-07-20 20:34:04,739 INFO sqlalchemy.engine.Engine INSERT INTO watch_list (user_id, symbol, created_at, updated_at) VALUES (%(user_id)s, %(symbol)s, now(), now()) RETURNING watch_list.created_at, watch_list.updated_at
2025-07-20 20:34:04,739 INFO sqlalchemy.engine.Engine [cached since 0.2808s ago] {'user_id': 15, 'symbol': '005930'}
2025-07-20 20:34:04,740 INFO sqlalchemy.engine.Engine COMMIT
2025-07-20 20:34:04,748 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-07-20 20:34:04,749 INFO sqlalchemy.engine.Engine SELECT watch_list.user_id AS watch_list_user_id, watch_list.symbol AS watch_list_symbol, watch_list.created_at AS watch_list_created_at, watch_list.updated_at AS watch_list_updated_at 
FROM watch_list 
WHERE watch_list.user_id = %(user_id_1)s
2025-07-20 20:34:04,749 INFO sqlalchemy.engine.Engine [cached since 0.2775s ago] {'user_id_1': 15}
2025-07-20 20:34:04,752 INFO sqlalchemy.engine.Engine ROLLBACK
2025-07-20 20:34:04,760 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-07-20 20:34:04,761 INFO sqlalchemy.engine.Engine SELECT daily_prices.id AS daily_prices_id, daily_prices.symbol AS daily_prices_symbol, daily_prices.date AS daily_prices_date, daily_prices.open AS daily_prices_open, daily_prices.high AS daily_prices_high, daily_prices.low AS daily_prices_low, daily_prices.close AS daily_prices_close, daily_prices.volume AS daily_prices_volume, daily_prices.created_at AS daily_prices_created_at, daily_prices.updated_at AS daily_prices_updated_at 
FROM daily_prices 
WHERE daily_prices.symbol = %(symbol_1)s AND daily_prices.date >= %(date_1)s AND daily_prices.date <= %(date_2)s ORDER BY daily_prices.date ASC
2025-07-20 20:34:04,761 INFO sqlalchemy.engine.Engine [cached since 1.407s ago] {'symbol_1': '005930', 'date_1': datetime.date(2025, 6, 10), 'date_2': datetime.date(2025, 7, 20)}
2025-07-20 20:34:04,768 INFO sqlalchemy.engine.Engine ROLLBACK
2025-07-20 20:34:04,775 INFO sqlalchemy.engine.Engine BEGIN (implicit)
2025-07-20 20:34:04,775 INFO sqlalchemy.engine.Engine SELECT daily_prices.id AS daily_prices_id, daily_prices.symbol AS daily_prices_symbol, daily_prices.date AS daily_prices_date, daily_prices.open AS daily_prices_open, daily_prices.high AS daily_prices_high, daily_prices.low AS daily_prices_low, daily_prices.close AS daily_prices_close, daily_prices.volume AS daily_prices_volume, daily_prices.created_at AS daily_prices_created_at, daily_prices.updated_at AS daily_prices_updated_at 
FROM daily_prices 
WHERE daily_prices.symbol = %(symbol_1)s ORDER BY daily_prices.date DESC 
 LIMIT %(param_1)s
2025-07-20 20:34:04,776 INFO sqlalchemy.engine.Engine [cached since 1.346s ago] {'symbol_1': '005930', 'param_1': 1}
2025-07-20 20:34:04,777 INFO sqlalchemy.engine.Engine ROLLBACK
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.Engine:base.py:1096 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1895 SELECT app_users.id AS app_users_id, app_users.username AS app_users_username, app_users.password_hash AS app_users_password_hash, app_users.email AS app_users_email, app_users.role AS app_users_role, app_users.is_active AS app_users_is_active, app_users.telegram_id AS app_users_telegram_id, app_users.created_at AS app_users_created_at, app_users.updated_at AS app_users_updated_at 
FROM app_users 
WHERE app_users.username = %(username_1)s OR app_users.email = %(email_1)s 
 LIMIT %(param_1)s
INFO     sqlalchemy.engine.Engine:base.py:1900 [cached since 2.696s ago] {'username_1': 'e2euser_edf5310c', 'email_1': 'e2euser_edf5310c@example.com', 'param_1': 1}
INFO     sqlalchemy.engine.Engine:base.py:1895 INSERT INTO app_users (username, password_hash, email, role, is_active, telegram_id, created_at, updated_at) VALUES (%(username)s, %(password_hash)s, %(email)s, %(role)s, %(is_active)s, %(telegram_id)s, now(), now()) RETURNING app_users.id, app_users.created_at, app_users.updated_at
INFO     sqlalchemy.engine.Engine:base.py:1900 [cached since 2.671s ago] {'username': 'e2euser_edf5310c', 'password_hash': '$2b$12$beX112ZeOW277nJHQwQ14.Hr4WXfkIQ0yCPHMaKBF3oKcCm79oluC', 'email': 'e2euser_edf5310c@example.com', 'role': 'user', 'is_active': True, 'telegram_id': None}
INFO     sqlalchemy.engine.Engine:base.py:1139 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:1096 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1895 SELECT app_users.id, app_users.username, app_users.password_hash, app_users.email, app_users.role, app_users.is_active, app_users.telegram_id, app_users.created_at, app_users.updated_at 
FROM app_users 
WHERE app_users.id = %(pk_1)s
INFO     sqlalchemy.engine.Engine:base.py:1900 [cached since 2.669s ago] {'pk_1': 15}
INFO     sqlalchemy.engine.Engine:base.py:1122 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:1096 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1895 SELECT watch_list.user_id AS watch_list_user_id, watch_list.symbol AS watch_list_symbol, watch_list.created_at AS watch_list_created_at, watch_list.updated_at AS watch_list_updated_at 
FROM watch_list 
WHERE watch_list.user_id = %(user_id_1)s AND watch_list.symbol = %(symbol_1)s 
 LIMIT %(param_1)s
INFO     sqlalchemy.engine.Engine:base.py:1900 [cached since 0.2822s ago] {'user_id_1': 15, 'symbol_1': '005930', 'param_1': 1}
INFO     sqlalchemy.engine.Engine:base.py:1895 INSERT INTO watch_list (user_id, symbol, created_at, updated_at) VALUES (%(user_id)s, %(symbol)s, now(), now()) RETURNING watch_list.created_at, watch_list.updated_at
INFO     sqlalchemy.engine.Engine:base.py:1900 [cached since 0.2808s ago] {'user_id': 15, 'symbol': '005930'}
INFO     sqlalchemy.engine.Engine:base.py:1139 COMMIT
INFO     sqlalchemy.engine.Engine:base.py:1096 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1895 SELECT watch_list.user_id AS watch_list_user_id, watch_list.symbol AS watch_list_symbol, watch_list.created_at AS watch_list_created_at, watch_list.updated_at AS watch_list_updated_at 
FROM watch_list 
WHERE watch_list.user_id = %(user_id_1)s
INFO     sqlalchemy.engine.Engine:base.py:1900 [cached since 0.2775s ago] {'user_id_1': 15}
INFO     sqlalchemy.engine.Engine:base.py:1122 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:1096 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1895 SELECT daily_prices.id AS daily_prices_id, daily_prices.symbol AS daily_prices_symbol, daily_prices.date AS daily_prices_date, daily_prices.open AS daily_prices_open, daily_prices.high AS daily_prices_high, daily_prices.low AS daily_prices_low, daily_prices.close AS daily_prices_close, daily_prices.volume AS daily_prices_volume, daily_prices.created_at AS daily_prices_created_at, daily_prices.updated_at AS daily_prices_updated_at 
FROM daily_prices 
WHERE daily_prices.symbol = %(symbol_1)s AND daily_prices.date >= %(date_1)s AND daily_prices.date <= %(date_2)s ORDER BY daily_prices.date ASC
INFO     sqlalchemy.engine.Engine:base.py:1900 [cached since 1.407s ago] {'symbol_1': '005930', 'date_1': datetime.date(2025, 6, 10), 'date_2': datetime.date(2025, 7, 20)}
INFO     sqlalchemy.engine.Engine:base.py:1122 ROLLBACK
INFO     sqlalchemy.engine.Engine:base.py:1096 BEGIN (implicit)
INFO     sqlalchemy.engine.Engine:base.py:1895 SELECT daily_prices.id AS daily_prices_id, daily_prices.symbol AS daily_prices_symbol, daily_prices.date AS daily_prices_date, daily_prices.open AS daily_prices_open, daily_prices.high AS daily_prices_high, daily_prices.low AS daily_prices_low, daily_prices.close AS daily_prices_close, daily_prices.volume AS daily_prices_volume, daily_prices.created_at AS daily_prices_created_at, daily_prices.updated_at AS daily_prices_updated_at 
FROM daily_prices 
WHERE daily_prices.symbol = %(symbol_1)s ORDER BY daily_prices.date DESC 
 LIMIT %(param_1)s
INFO     sqlalchemy.engine.Engine:base.py:1900 [cached since 1.346s ago] {'symbol_1': '005930', 'param_1': 1}
INFO     sqlalchemy.engine.Engine:base.py:1122 ROLLBACK
ERROR    src.api.routers.simulated_trade:simulated_trade.py:54 모의매매 기록 실패: 'DailyPrice' object has no attribute 'close_price'
Traceback (most recent call last):
  File "/app/src/api/routers/simulated_trade.py", line 22, in simulate_trade
    current_price = stock_service.get_current_price(trade.symbol, db)
  File "/app/src/api/services/stock_service.py", line 39, in get_current_price
    return latest_price.close_price
AttributeError: 'DailyPrice' object has no attribute 'close_price'
=============================== warnings summary ===============================
../usr/local/lib/python3.10/site-packages/pydantic/_internal/_config.py:323
../usr/local/lib/python3.10/site-packages/pydantic/_internal/_config.py:323
  /usr/local/lib/python3.10/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED src/api/tests/test_admin_scheduler.py::TestAdminScheduler::test_schedule_status
FAILED src/api/tests/test_api_simulated_trade.py::test_simulate_trade - asser...
FAILED src/api/tests/test_e2e_scenario.py::test_e2e_scenario - assert 500 == 200
=================== 3 failed, 20 passed, 2 warnings in 4.94s ===================
